import pytest

from src.application.use_cases.delete_product import DeleteProductUseCase
from src.domain.exceptions import ProductNotExistingDataBase, ProductDeletingError


@pytest.mark.unit
def test_delete_product_use_case_success(
    pure_mock_product_repo,
    pure_mock_price_repo,
    pure_mock_user_repo,
    product,
    price_created_first,
    price_after_checking,
    user,
):
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
    pure_mock_product_repo.get.return_value = product
    pure_mock_price_repo.get_all_prices_by_product.return_value = [price_created_first ,price_after_checking]
    #pure_mock_price_repo.get_latest_for_product.return_value = price
    pure_mock_user_repo.get.return_value = user

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ save
    user.products.append(product.id)

    use_case = DeleteProductUseCase(
        product_repo=pure_mock_product_repo,
        price_repo=pure_mock_price_repo,
        user_repo=pure_mock_user_repo,
    )

    use_case.execute(product_id=product.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
    pure_mock_price_repo.delete_all_prices_for_product.assert_called_once_with(product.id)
    pure_mock_product_repo.delete.assert_called_once_with(product.id)
    pure_mock_user_repo.get.assert_called_once_with(product.user_id)
    pure_mock_user_repo.save.assert_called_once_with(user)
    assert product.id not in user.products

@pytest.mark.unit
def test_delete_product_use_case_unsuccess_notexist_in_db(
    pure_mock_product_repo,
    pure_mock_price_repo,
    pure_mock_user_repo,
    product,
):
    pure_mock_product_repo.get.return_value = None

    use_case = DeleteProductUseCase(
        product_repo=pure_mock_product_repo,
        price_repo=pure_mock_price_repo,
        user_repo=pure_mock_user_repo,
    )

    with pytest.raises(ProductNotExistingDataBase, match=f'–¢–æ–≤–∞—Ä {product.id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î!'):
        use_case.execute(product_id=product.id)

@pytest.mark.unit
def test_delete_product_use_case_fails(
    pure_mock_product_repo,
    pure_mock_price_repo,
    pure_mock_user_repo,
    product,
    price_created_first,
    price_after_checking,
    user,
):
    # –ù–∞—Å—Ç—Ä–æ–∏–º –º–æ–∫–∏
    pure_mock_product_repo.get.return_value = product
    pure_mock_price_repo.get_all_prices_by_product.return_value = [price_created_first ,price_after_checking]
    pure_mock_user_repo.get.return_value = user

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    pure_mock_product_repo.delete.side_effect = Exception("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")

    # Act & Assert
    use_case = DeleteProductUseCase(
        product_repo=pure_mock_product_repo,
        price_repo=pure_mock_price_repo,
        user_repo=pure_mock_user_repo,
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–±—Ä–æ—Å –æ—à–∏–±–∫–∏
    with pytest.raises(ProductDeletingError, match="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"):
        use_case.execute(product_id=product.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –Ω–µ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
    # üß™üß™üß™(–¢–ò–ö–ï–¢ #26) –°–¢–†–û–ö–ê –ù–ò–ñ–ï –ù–ï –î–û–õ–ñ–ù–ê –í–´–ü–û–õ–ù–Ø–¢–¨–°–Ø 
    #pure_mock_price_repo.delete_all_prices_for_product.assert_not_called()
    pure_mock_product_repo.save.assert_not_called()
    pure_mock_user_repo.save.assert_not_called()