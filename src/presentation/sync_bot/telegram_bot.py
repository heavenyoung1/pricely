import logging
from src.presentation.sync_bot.bot_instance import bot
from src.presentation.sync_bot.handlers import start, products, menu, delete, navigation, statistics, errors
from src.infrastructure.scheduler import start_scheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers():
    start.register_handlers(bot)
    statistics.register_handlers(bot)
    errors.register_handlers(bot)
    navigation.register_handlers(bot)
    products.register_handlers(bot)
    menu.register_handlers(bot)
    delete.register_handlers(bot)


def main():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è)
    try:
        webhook_info = bot.get_webhook_info()
        logger.info(f"Webhook info before polling: {webhook_info.__dict__}")
        if webhook_info.url:
            bot.remove_webhook()
            logger.info("–£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π webhook")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook: {e}")

    # üëâ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    register_handlers()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ü–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    start_scheduler()

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    bot.infinity_polling(none_stop=True, interval=0, timeout=20, logger_level=logging.DEBUG)


if __name__ == "__main__":
    main()
