from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from src.presentation.bot.bot_instance import bot, logger
from src.presentation.bot.service_connector import service
from src.presentation.bot.keyboards.main_menu import main_menu

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
def add_product_request(message: Message):
    bot.send_message(message.chat.id, "üì¶ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Ozon")
    bot.register_next_step_handler(message, add_product_process)

def add_product_process(message: Message):
    bot.send_message(message.chat.id, "‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ...")
    url = message.text.strip()
    try:
        result = service.create_product(str(message.from_user.id), url)

        bot.send_message(
            message.chat.id,
            f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['product_name']}\n"
            f"–¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π: {result['with_card']} ‚ÇΩ\n"
            f"–¶–µ–Ω–∞ –±–µ–∑ –∫–∞—Ä—Ç—ã: {result['without_card']} ‚ÇΩ",
            reply_markup=main_menu()
        )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda m: "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã" in m.text)
def list_products(message: Message):
    try:
        products = service.get_all_products(str(message.from_user.id))
        if not products:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            return

        kb = InlineKeyboardMarkup(row_width=1)
        for p in products:
            name = p.get("name") or p.get("product_name") or p.get("id")
            display = name if len(name) <= 60 else name[:57] + "..."
            kb.add(InlineKeyboardButton(text=display, callback_data=f"product:{p['id']}"))

        bot.send_message(message.chat.id, "üìã –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:", reply_markup=kb)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda m: m.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ")
def clear_products(message: Message):
    try:
        service.delete_all_products(str(message.from_user.id))
        bot.send_message(message.chat.id, "üóëÔ∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–æ–≤–∞—Ä–æ–≤")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

def register_handlers(bot):
    bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")(add_product_request)
    bot.message_handler(func=lambda m: "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã" in m.text)(list_products)
    bot.message_handler(func=lambda m: m.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ")(clear_products)