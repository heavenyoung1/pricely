from aiogram.types import CallbackQuery, Message
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime

from src.presentation.bot.utils.fsm import ProductAddState
from src.infrastructure.services import product_service
from src.infrastructure.services.logger import logger
from src.presentation.bot.utils.formatters import format_product_message
from src.presentation.bot.utils.keyboard import build_product_actions_keyboard


# ================= –î–û–ë–ê–í–ò–¢–¨ –¢–û–í–ê–† ================= #

async def add_product_request(message: Message, state: FSMContext):
    '''–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.'''
    await message.answer('üì¶ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Ozon')
    await state.set_state(ProductAddState.waiting_for_url)
    await message.answer('‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ...')


async def add_product_process(message: Message, state: FSMContext):
    '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç URL —Ç–æ–≤–∞—Ä–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ —Å–∏—Å—Ç–µ–º—É.'''
    if not await state.get_state() == ProductAddState.waiting_for_url:
        return
    
    url = message.text.strip()
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        await message.answer('‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ...')
        
        # –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        result = product_service.create_product(str(message.from_user.id), url)

        # –ö–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await message.answer(
            f'‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n\n'
            f'–ù–∞–∑–≤–∞–Ω–∏–µ: {result["product_name"]}\n'
            f'–¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π: {result["with_card"]} ‚ÇΩ\n'
            f'–¶–µ–Ω–∞ –±–µ–∑ –∫–∞—Ä—Ç—ã: {result["without_card"]} ‚ÇΩ',
            reply_markup=build_product_actions_keyboard(result['product_id'], result['link'])
        )
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞')
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    finally:
        await state.clear()


# ================= –ü–û–õ–£–ß–ò–¢–¨ –°–ü–ò–°–û–ö –¢–û–í–ê–†–û–í ================= #

async def get_my_product_list(message: Message):
    '''–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'''
    try:
        products = product_service.get_all_products(str(message.from_user.id))
        
        if not products:
            await message.answer('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤')
            return
        
        inline_keyboard = [
            [InlineKeyboardButton(
                text=_truncate_name(p.get('name') or p.get('product_name') or p.get('id')),
                callback_data=f'product:{p["id"]}'
            )]
            for p in products
        ]
        
        kb = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
        await message.answer('üìã –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:', reply_markup=kb)

    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤')
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞: {e}')


async def handle_product_button(call: CallbackQuery):
    '''–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.'''
    await call.answer()
    
    product_id = call.data.split(':', 1)[1]

    try:
        product = product_service.get_full_product(product_id)
        if not product:
            await call.message.edit_text('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return
        
        text = format_product_message(product)
        kb = build_product_actions_keyboard(product_id=product['id'], product_link=product['link'])

        await call.message.edit_text(
            text=text,
            parse_mode='HTML',
            reply_markup=kb,
            disable_web_page_preview=False
        )

    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –≤ handle_product_button')
        await call.answer(f'–û—à–∏–±–∫–∞: {e}', show_alert=True)

# ================= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ================= #

def _truncate_name(name: str, max_length: int = 60) -> str:
    '''–û–±—Ä–µ–∑–∞–µ—Ç –∏–º—è —Ç–æ–≤–∞—Ä–∞ –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã.'''
    return name if len(name) <= max_length else name[:max_length - 3] + '...'