from telebot.types import Message
from src.presentation.bot.bot_instance import bot
from src.presentation.bot.service_connector import service
from src.presentation.bot.keyboards.main_menu import main_menu

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
def add_product_request(message: Message):
    bot.send_message(message.chat.id, "üì¶ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Ozon")
    bot.register_next_step_handler(message, add_product_process)

def add_product_process(message: Message):
    url = message.text.strip()
    try:
        result = service.create_product(str(message.from_user.id), url)
        bot.send_message(
            message.chat.id,
            f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['name']}\n"
            f"–¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π: {result['with_card']} ‚ÇΩ\n"
            f"–¶–µ–Ω–∞ –±–µ–∑ –∫–∞—Ä—Ç—ã: {result['without_card']} ‚ÇΩ",
            reply_markup=main_menu()
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda m: m.text == "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã" in m.text)
def list_products(message: Message):
    try:
        products = service.get_all_products(str(message.from_user.id))
        if not products:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            return
        text = "üìã –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n\n"
        for p in products:
            latest = p["latest_price"]
            text += f"{p['name']} ‚Äî {latest['with_card']} ‚ÇΩ (—Å –∫–∞—Ä—Ç–æ–π)\n"
        bot.send_message(message.chat.id, text)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
def delete_product_request(message: Message):
    bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    bot.register_next_step_handler(message, delete_product_process)

def delete_product_process(message: Message):
    product_id = message.text.strip()
    try:
        service.delete_product(product_id)
        bot.send_message(message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä {product_id} —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda m: m.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ")
def clear_products(message: Message):
    try:
        service.delete_all_products(str(message.from_user.id))
        bot.send_message(message.chat.id, "üóëÔ∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda m: True)  # –≤—Ä–µ–º–µ–Ω–Ω–æ –ª–æ–≤–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def debug_all(message: Message):
    print(f"DEBUG: {repr(message.text)}")
