from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime

from src.presentation.bot.utils.fsm import ProductAddState
from src.infrastructure.services import product_service
from src.infrastructure.services.logger import logger
from src.presentation.bot.utils.formatters import format_product_message
from src.presentation.bot.utils.keyboard import build_product_actions_keyboard


# ================= –î–û–ë–ê–í–ò–¢–¨ –¢–û–í–ê–† ================= #

async def add_product_request(message: Message, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    await message.answer("üì¶ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Ozon")
    await state.set_state(ProductAddState.waiting_for_url)
    await message.answer("‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ...")


async def add_product_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç URL —Ç–æ–≤–∞—Ä–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ —Å–∏—Å—Ç–µ–º—É."""
    if not await state.get_state() == ProductAddState.waiting_for_url:
        return
    
    url = message.text.strip()
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        await message.answer("‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ...")
        
        # –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        result = product_service.create_product(str(message.from_user.id), url)

        # –ö–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['product_name']}\n"
            f"–¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π: {result['with_card']} ‚ÇΩ\n"
            f"–¶–µ–Ω–∞ –±–µ–∑ –∫–∞—Ä—Ç—ã: {result['without_card']} ‚ÇΩ",
            reply_markup=build_product_actions_keyboard(result['product_id'], result['link'])
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()


# ================= –ü–û–õ–£–ß–ò–¢–¨ –°–ü–ò–°–û–ö –¢–û–í–ê–†–û–í ================= #

async def get_my_product_list(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        products = product_service.get_all_products(str(message.from_user.id))
        
        if not products:
            await message.answer('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤')
            return
        
        inline_keyboard = [
            [InlineKeyboardButton(
                text=_truncate_name(p.get('name') or p.get('product_name') or p.get('id')),
                callback_data=f"product:{p['id']}"
            )]
            for p in products
        ]
        
        kb = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
        await message.answer("üìã –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:", reply_markup=kb)

    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤')
        await message.answer(f'‚ùå –û—à–∏–±–∫–∞: {e}')


async def handle_product_button(call: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ."""
    await call.answer()
    
    product_id = call.data.split(':', 1)[1]

    try:
        product = product_service.get_full_product(product_id)
        if not product:
            await call.message.edit_text('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return
        
        text = format_product_message(product)
        kb = build_product_actions_keyboard(product_id=product['id'], product_link=product['link'])

        await call.message.edit_text(
            text=text,
            parse_mode='HTML',
            reply_markup=kb,
            disable_web_page_preview=False
        )

    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –≤ handle_product_button')
        await call.answer(f'–û—à–∏–±–∫–∞: {e}', show_alert=True)


# ================= –û–ë–ù–û–í–ò–¢–¨ –¶–ï–ù–£ ================= #

async def handle_update_price(call: CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    product_id = call.data.split(':', 1)[1]
    logger.info(f'–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}')

    try:
        await call.answer("‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É...")
        
        # update_product_price –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"full_product": {...}, "is_changed": bool}
        result = product_service.update_product_price(product_id)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
        full_product_info = result['full_product']
        is_changed = result.get('is_changed', False)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞: {full_product_info}")

        new_text = _build_price_update_message(full_product_info, full_product_info)
        new_markup = build_product_actions_keyboard(product_id, full_product_info['link'])

        await _safe_edit_message(
            call.message, 
            new_text, 
            new_markup,
            is_changed,
        )

    except Exception as e:
        logger.exception('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã')
        await _show_error_message(call, product_id)


# ================= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ================= #

def _truncate_name(name: str, max_length: int = 60) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç –∏–º—è —Ç–æ–≤–∞—Ä–∞ –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã."""
    return name if len(name) <= max_length else name[:max_length - 3] + '...'


def _get_price_change_emoji(current: float, previous: float) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã."""
    if current > previous:
        return "üî∫"  # –£–≤–µ–ª–∏—á–∏–ª–∞—Å—å
    elif current < previous:
        return "üîª"  # –£–º–µ–Ω—å—à–∏–ª–∞—Å—å
    else:
        return "üîÑ"  # –ù–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å


def _build_price_update_message(updated_product: dict, full_info: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã."""
    logger.info(f'FULL INFO DEBUG!!!! {full_info}')
    name = updated_product['name']
    price_with_card = full_info['latest_price']['with_card']
    price_without_card = full_info['latest_price']['without_card']
    prev_with_card = full_info['latest_price']['previous_price_with_card']
    prev_without_card = full_info['latest_price']['previous_price_without_card']
    
    emoji = _get_price_change_emoji(price_with_card, prev_with_card)
    updated_at = full_info['created_at'].strftime('%Y-%m-%d %H:%M:%S')
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message = (
        f"üì¶ {name}\n"
        f"üí≥ –¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π: {price_with_card} ‚ÇΩ {emoji}\n"
        f"üíµ –¶–µ–Ω–∞ –±–µ–∑ –∫–∞—Ä—Ç—ã: {price_without_card} ‚ÇΩ {emoji}\n"
        f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {updated_product['link']}\n\n"
        f"üìä –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ü–µ–Ω—ã:\n"
        f"  üí≥ –° –∫–∞—Ä—Ç–æ–π: {prev_with_card} ‚ÇΩ\n"
        f"  üíµ –ë–µ–∑ –∫–∞—Ä—Ç—ã: {prev_without_card} ‚ÇΩ\n\n"
        f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_at}"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    if emoji == "üîÑ":
        message = f"‚úÖ –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å\n\n{message}"
    
    return message


async def _safe_edit_message(message, text: str, markup, is_changed: bool):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    try:
        await message.edit_text(
            text=text,
            parse_mode='HTML',
            reply_markup=markup,
            disable_web_page_preview=False
        )
        logger.info('‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!' if is_changed else '‚úÖ –¶–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞')
        
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ')
        else:
            raise


async def _show_error_message(call: CallbackQuery, product_id: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞."""
    try:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'product:{product_id}')
            ]]
        )
        await call.message.edit_text(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            reply_markup=kb
        )
    except Exception:
        logger.exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π')
    