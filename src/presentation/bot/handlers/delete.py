from telebot.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from src.presentation.bot.bot_instance import bot, logger
from src.presentation.bot.service_connector import service
from src.presentation.bot.utils.formatters import format_product_message
from src.presentation.bot.utils.keyboards import build_product_actions_keyboard

# 1Ô∏è‚É£ –ò–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@bot.message_handler(func=lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
def choose_product_to_delete(message: Message):
    try:
        products = service.get_all_products(str(message.from_user.id))
        if not products:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            return

        kb = InlineKeyboardMarkup(row_width=1)
        for p in products:
            name = p.get("name") or p.get("product_name") or p.get("id")
            display = name if len(name) <= 60 else name[:57] + "..."
            kb.add(InlineKeyboardButton(text=f"üóë {display}", callback_data=f"delete_product:{p['id']}"))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


# 2Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data and call.data.startswith("delete_product:"))
def handle_delete_product_request(call: CallbackQuery):
    bot.answer_callback_query(call.id)
    product_id = call.data.split(":", 1)[1]

    try:
        product = service.get_full_product(product_id)
        if not product:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{product_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete:{product_id}")
        )

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä <b>{product['name']}</b>?",
            parse_mode="HTML",
            reply_markup=kb
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è")
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


# 3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data and call.data.startswith("confirm_delete:"))
def handle_confirm_delete(call: CallbackQuery):
    bot.answer_callback_query(call.id)
    product_id = call.data.split(":", 1)[1]

    try:
        service.delete_product(product_id)

        products = service.get_all_products(str(call.from_user.id))
        if not products:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.\nüì≠ –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."
            )
            return

        kb = InlineKeyboardMarkup(row_width=1)
        for p in products:
            name = p.get("name") or p.get("product_name") or p.get("id")
            display = name if len(name) <= 60 else name[:57] + "..."
            kb.add(InlineKeyboardButton(text=display, callback_data=f"product:{p['id']}"))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.\nüìã –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:",
            reply_markup=kb
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è")
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


# 4Ô∏è‚É£ –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data and call.data.startswith("cancel_delete:"))
def handle_cancel_delete(call: CallbackQuery):
    bot.answer_callback_query(call.id)
    product_id = call.data.split(":", 1)[1]

    try:
        product = service.get_full_product(product_id)
        if not product:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            return

        text = format_product_message(product)
        kb = build_product_actions_keyboard(product_id=product["id"], product_link=product["link"])

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode="HTML",
            reply_markup=kb,
            disable_web_page_preview=False
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è")
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

def register_handlers(bot):
    bot.message_handler(func=lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")(choose_product_to_delete)