import logging
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from src.infrastructure.services import product_service
from src.presentation.bot.utils.formatters import format_product_message
from src.presentation.bot.utils.keyboard import build_product_actions_keyboard

logger = logging.getLogger(__name__)

async def choose_product_to_delete(message: Message):
    '''–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'''
    try:
        products = product_service.get_all_products(str(message.from_user.id))
        if not products:
            await message.answer('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤')
            return
        
        buttons = []
        for p in products:
            name = p.get('name') or p.get('product_name') or p.get('id')
            display = name if len(name) <= 60 else name[:57] + '...'
            buttons.append([
                InlineKeyboardButton(text=f'üóë {display}', callback_data=f'delete_product:{p["id"]}')
            ])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer('üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=kb)

    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
        await message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


async def handle_delete_product_request(call: CallbackQuery):
    '''–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è'''
    await call.answer()
    product_id = call.data.split(':', 1)[1]

    try:
        product = product_service.get_full_product(product_id)
        if not product:
            await call.message.edit_text('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return

        # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å aiogram 3.x
        keyboard = [[
            InlineKeyboardButton(text='‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data=f'confirm_delete:{product_id}'),
            InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=f'cancel_delete:{product_id}')
        ]]
        kb = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await call.message.edit_text(
            f'‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä <b>{product["name"]}</b>?',
            parse_mode='HTML',
            reply_markup=kb
        )
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è')
        try:
            await call.message.edit_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        except Exception:
            await call.message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


async def handle_confirm_delete(call: CallbackQuery):
    '''–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è'''
    await call.answer()
    product_id = call.data.split(':', 1)[1]

    try:
        product_service.delete_product(product_id)

        products = product_service.get_all_products(str(call.from_user.id))
        if not products:
            await call.message.edit_text(
                'üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.\nüì≠ –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.'
            )
            return

        buttons = []
        for p in products:
            name = p.get('name') or p.get('product_name') or p.get('id')
            display = name if len(name) <= 60 else name[:57] + '...'
            buttons.append([
                InlineKeyboardButton(text=display, callback_data=f'product:{p["id"]}')
            ])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        await call.message.edit_text(
            'üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.\nüìã –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:',
            reply_markup=kb
        )
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è')
        try:
            await call.message.edit_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        except Exception:
            await call.message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


async def handle_cancel_delete(call: CallbackQuery):
    '''–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è'''
    await call.answer()
    product_id = call.data.split(':', 1)[1]

    try:
        product = product_service.get_full_product(product_id)
        if not product:
            await call.message.edit_text('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return

        text = format_product_message(product)
        kb = build_product_actions_keyboard(product_id=product['id'], product_link=product['link'])

        await call.message.edit_text(
            text=text,
            parse_mode='HTML',
            reply_markup=kb,
            disable_web_page_preview=False
        )
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è')
        try:
            await call.message.edit_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        except Exception:
            await call.message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
