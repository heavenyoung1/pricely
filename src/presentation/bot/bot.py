from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio

from src.core import SQLAlchemyUnitOfWork, with_uow
from src.presentation.bot.config import BOT_TOKEN
from src .infrastructure.services.logger import logger
from src.infrastructure.services.scheduler_service import APSchedulerService
from src.infrastructure.services import ProductService, NotificationService


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
from src.presentation.bot.utils.fsm import ProductAddState

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from .handlers.start import command_start_handler
from .handlers.help import command_help_handler
from .handlers.products import (
    add_product_request, 
    add_product_process, 
    get_my_product_list, 
    handle_product_button,
    handle_update_price,
    )

from src.presentation.bot.handlers.delete import (
    choose_product_to_delete,
    handle_delete_product_request,
    handle_confirm_delete,
    handle_cancel_delete,
)
from src.presentation.bot.handlers.navigation import handle_back_to_products
from src.presentation.bot.handlers.error import fallback

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_message_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    dp.message.register(command_start_handler, CommandStart())
    dp.message.register(command_help_handler, Command("help"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    dp.message.register(add_product_request, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    dp.message.register(get_my_product_list, F.text == "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
    dp.message.register(choose_product_to_delete, F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
    dp.message.register(command_help_handler, F.text == "üìñ –°–ø—Ä–∞–≤–∫–∞")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ FSM
    dp.message.register(add_product_request, Command("add_product"))
    dp.message.register(add_product_process, ProductAddState.waiting_for_url)

    # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    dp.message.register(get_my_product_list, Command("my_products"))

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    dp.message.register(choose_product_to_delete, Command("delete"))

def register_callback_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    dp.callback_query.register(handle_delete_product_request, lambda call: call.data.startswith("delete_product:"))
    dp.callback_query.register(handle_confirm_delete, lambda call: call.data.startswith("confirm_delete:"))
    dp.callback_query.register(handle_cancel_delete, lambda call: call.data.startswith("cancel_delete:"))

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    dp.callback_query.register(handle_back_to_products, F.data == "back_to_products")

    # –î–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    dp.callback_query.register(handle_product_button, lambda call: call.data.startswith("product:"))
    dp.callback_query.register(handle_update_price, lambda call: call.data.startswith("update_price:"))

def register_fallback_handler(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–æ–ª–±–µ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    dp.message.register(fallback)


    logger.info("–í—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

async def main() -> None:
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_message_handlers(dp)
    register_callback_handlers(dp)
    register_fallback_handler(dp)

    # –°–µ—Ä–≤–∏—Å—ã
    product_service = ProductService(uow_factory=SQLAlchemyUnitOfWork)
    notification_service = NotificationService(bot)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = APSchedulerService(
        bot=bot,
        product_service=product_service,
        notification_service=notification_service,
        interval_minutes=5  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())