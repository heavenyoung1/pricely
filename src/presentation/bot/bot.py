from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio

from src.presentation.bot.config import BOT_TOKEN
from src .infrastructure.services.logger import logger

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
from src.presentation.bot.utils.fsm import ProductAddState

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from .handlers.start import command_start_handler
from .handlers.help import command_help_handler
from .handlers.products import (
    add_product_request, 
    add_product_process, 
    get_my_product_list, 
    handle_product_button,
    handle_update_price,
    )

from src.presentation.bot.handlers.delete import (
    choose_product_to_delete,
    handle_delete_product_request,
    handle_confirm_delete,
    handle_cancel_delete,
)
from src.presentation.bot.handlers.navigation import handle_back_to_products
from src.presentation.bot.handlers.error import fallback

# Dispatcher —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º FSM


def register_handlers():
    """
    –í—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã —Å–æ–±–∏—Ä–∞–µ–º –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
    """


    logger.info("–í—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

async def main() -> None:
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

    # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(command_start_handler, CommandStart())
    dp.message.register(command_help_handler, Command("help"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¢–ï–ö–°–¢–û–í–´–• –∫–Ω–æ–ø–æ–∫ –∏–∑ –º–µ–Ω—é
    dp.message.register(add_product_request, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    dp.message.register(get_my_product_list, F.text == "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
    dp.message.register(choose_product_to_delete, F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
    dp.message.register(command_help_handler, F.text == "üìñ –°–ø—Ä–∞–≤–∫–∞")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ FSM
    dp.message.register(add_product_request, Command("add_product"))
    dp.message.register(add_product_process, ProductAddState.waiting_for_url)

    # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –∏–∑ –ë–î, –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞!)
    dp.message.register(get_my_product_list, Command("my_products"))

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    dp.message.register(choose_product_to_delete, Command("delete"))
    dp.callback_query.register(handle_delete_product_request, lambda call: call.data.startswith("delete_product:"))
    dp.callback_query.register(handle_confirm_delete, lambda call: call.data.startswith("confirm_delete:"))
    dp.callback_query.register(handle_cancel_delete, lambda call: call.data.startswith("cancel_delete:"))

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    dp.callback_query.register(handle_back_to_products, F.data == "back_to_products")

    # –î–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    dp.callback_query.register(handle_product_button, lambda call: call.data.startswith("product:"))
    dp.callback_query.register(handle_update_price, lambda call: call.data.startswith("update_price:"))

    # –§–æ–ª–±–µ–∫ ‚Äî –≤—Å–µ–≥–¥–∞ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(fallback)

    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())