import os
import sys
import logging
from dotenv import load_dotenv
from telebot import TeleBot
from telebot.types import Message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ozon_parser.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (–¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó!)
bot = TeleBot(BOT_TOKEN, parse_mode="HTML")

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞)
from src.infrastructure.services import ProductService
from src.domain.entities import User, Price
from src.core import SQLAlchemyUnitOfWork
from presentation.bot import main_menu

# –°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π
service = ProductService(uow_factory=SQLAlchemyUnitOfWork)

# ====================== –°–¢–ê–†–¢ ======================
@bot.message_handler(commands=["start"])
def start(message: Message):
    user = User(
        id=str(message.from_user.id),
        username=message.from_user.username or "unknown",
        chat_id=str(message.chat.id),
        products=[]
    )
    try:
        service.create_user(user)
    except Exception:
        pass  # —é–∑–µ—Ä —É–∂–µ –µ—Å—Ç—å
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã", reply_markup=main_menu())

# ====================== –î–û–ë–ê–í–ò–¢–¨ –¢–û–í–ê–† ======================
@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
def add_product_request(message: Message):
    bot.send_message(message.chat.id, "üì¶ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Ozon")
    bot.register_next_step_handler(message, add_product_process)

def add_product_process(message: Message):
    url = message.text.strip()
    try:
        result = service.create_product(str(message.from_user.id), url)
        bot.send_message(
            message.chat.id,
            f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result['name']}\n"
            f"–¶–µ–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π: {result['with_card']} ‚ÇΩ\n"
            f"–¶–µ–Ω–∞ –±–µ–∑ –∫–∞—Ä—Ç—ã: {result['without_card']} ‚ÇΩ"
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ====================== –ú–û–ò –¢–û–í–ê–†–´ ======================
@bot.message_handler(func=lambda m: m.text == "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
def list_products(message: Message):
    try:
        products = service.get_full_product_list(str(message.from_user.id))
        if not products:
            bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            return
        text = "üìã –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n\n"
        for p in products:
            latest = p["latest_price"]
            text += f"{p['name']} ‚Äî {latest['with_card']} ‚ÇΩ (—Å –∫–∞—Ä—Ç–æ–π)\n"
        bot.send_message(message.chat.id, text)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ====================== –£–î–ê–õ–ò–¢–¨ –¢–û–í–ê–† ======================
@bot.message_handler(func=lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
def delete_product_request(message: Message):
    bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å")
    bot.register_next_step_handler(message, delete_product_process)

def delete_product_process(message: Message):
    product_id = message.text.strip()
    try:
        service.delete_product(product_id)
        bot.send_message(message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä {product_id} —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ====================== –û–ß–ò–°–¢–ò–¢–¨ –í–°–ï ======================
@bot.message_handler(func=lambda m: m.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ")
def clear_products(message: Message):
    try:
        service.delete_all_products(str(message.from_user.id))
        bot.send_message(message.chat.id, "üóëÔ∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞")
    bot.infinity_polling()