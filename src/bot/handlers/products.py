from telebot.types import Message
from requests import head
import logging
import sys
import uuid

from src.bot.keyboards.main_menu import main_menu
from src.infrastructure.core.ozon_parser import OzonParser
from src.infrastructure.services import ProductService
from src.domain.entities import Product, Price, User
from src.infrastructure.database.core import get_db_session


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ozon_parser.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# —Å–µ—Ä–≤–∏—Å—ã
parser = OzonParser()
product_service = ProductService(uow_factory=get_db_session)

def register_handlers(bot):

    @bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    def add_product(message: Message):
        user_states[message.chat.id] = "waiting_for_product_url"
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä —Å Ozon).")

    @bot.message_handler(func=lambda m: m.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
    def remove_product(message: Message):
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞).")

    @bot.message_handler(func=lambda m: m.text == "üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
    def list_products(message: Message):
        bot.send_message(message.chat.id, "–¢–≤–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞).")

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä
    @bot.message_handler(func=lambda m: user_states.get(m.chat.id) == 'waiting_for_product_url')
    def handle_product_url(message: Message):
        url = message.text.strip()
        user_id = str(message.from_user.id)

        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        try:
            bot.send_message(message.chat.id, f'–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞—Ç, –æ–∂–∏–¥–∞–π—Ç–µ.')
            product_data = parser.parse_product(url)
            logger.info(f'–£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {url}: {product_data}')
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É.", reply_markup=main_menu())
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL {url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–º–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
        try:
            product = Product (
                id = product_data['id'],
                user_id=user_id,
                price_id=str(uuid.uuid4()),
                name=product_data['name'],
                link=url,
                image_url=product_data['image_url'],
                rating=product_data['rating'],
                categories=product_data['categories']
            )

            price = Price(
                id 
            )
            
        except Exception as e:
            raise