import logging
from apscheduler.schedulers.background import BackgroundScheduler
from src.presentation.bot.service_connector import service

logger = logging.getLogger(__name__)


def check_prices_for_all_users():
    """–ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—ã –Ω–∞ –∏—Ö —Ç–æ–≤–∞—Ä—ã"""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        uow = service.uow_factory()
        users = uow.user_repository.get_all()

        for user in users:
            products = service.get_all_products(str(user.id))
            for product in products:
                service.update_product_price(product["id"])

        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω: {e}")


def start_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç APScheduler –≤ —Ñ–æ–Ω–µ"""
    scheduler = BackgroundScheduler()
    scheduler.add_job(check_prices_for_all_users, "interval", minutes=30)  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    scheduler.start()

    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)")
    return scheduler
