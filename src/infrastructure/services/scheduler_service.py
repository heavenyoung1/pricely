from src.infrastructure.services import product_service, NotificationService
from src.infrastructure.services.logger import logger
from src.presentation.bot.utils.keyboard import build_product_actions_keyboard
from src.presentation.bot.handlers.products import _build_price_update_message
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.events import EVENT_JOB_EXECUTED, EVENT_JOB_ERROR
from datetime import datetime
import asyncio


class APSchedulerService:
    def __init__(self, bot, product_service, notification_service, interval_minutes=1):
        """
        –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (APS).
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω.
        """
        self.scheduler = BackgroundScheduler()
        self.bot = bot
        self.product_service = product_service
        self.notification_service = notification_service
        self.interval_minutes = interval_minutes

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞—á
        self.scheduler.add_listener(self.listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        self.scheduler.add_job(self.run_price_update, 'interval', minutes=self.interval_minutes, id="update_prices")
        self.scheduler.start()
        logger.info(f"üîÅ APScheduler –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval_minutes} –º–∏–Ω).")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        self.scheduler.shutdown()
        logger.info("üõë APScheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    def listener(self, event):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á."""
        if event.exception:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {event.exception}")
        else:
            logger.info("‚úÖ ShedulerService –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É —É—Å–ø–µ—à–Ω–æ.")

    def run_price_update(self):
        """–§–æ–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω...")

        try:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                loop.run_until_complete(self._async_price_update())
            finally:
                loop.close()

            logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", exc_info=True)

    async def _async_price_update(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω."""
        users_products = self.product_service.get_all_products_for_update()

        if not users_products:
            logger.info("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        for user_product in users_products:
            try:
                product_id = user_product['product_id']
                user_id = user_product['user_id']
                
                logger.info(f'–ò–∑–≤–ª–µ—á–µ–Ω user:product -> {user_product}')
                logger.info(f'–ü–æ–ª—É—á–µ–Ω —Ç–æ–≤–∞—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ID={product_id}')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
                result = self.product_service.update_product_price(product_id)
                
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}: is_changed={result.get('is_changed')}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if not result or 'full_product' not in result:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {result}")
                    continue
                
                full_product = result["full_product"]
                
                # ========================================
                # –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–≥–¥–∞
                # ========================================
                logger.info(f"üß™ –¢–ï–°–¢: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                await self._send_notification(user_id, full_product)
                
                # ========================================
                # –ü–†–û–î–ê–ö–®–ï–ù –ö–û–î (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç –∫–æ–≥–¥–∞ —Ç–µ—Å—Ç –ø—Ä–æ–π–¥—ë—Ç):
                # ========================================
                # if result.get("is_changed", False):
                #     logger.info(f"üîî –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}, –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                #     await self._send_notification(user_id, full_product)
                # else:
                #     logger.info(f"–¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
                logger.info("üß™ –¢–ï–°–¢: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
                break
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ {user_product.get('product_id', 'unknown')}: {e}", exc_info=True)
                continue

    async def _send_notification(self, chat_id: str, full_product: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ."""
        try:
            logger.info(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            logger.info(f"üì¶ –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞: {full_product}")
            
            await self.notification_service.notify_price_change(
                chat_id=chat_id,
                updated_product=full_product,
                #full_product=full_product
            )
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}", exc_info=True)

