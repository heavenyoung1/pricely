from src.infrastructure.services import product_service, NotificationService
from src.infrastructure.services.logger import logger
from src.presentation.bot.utils.keyboard import build_product_actions_keyboard
from src.presentation.bot.handlers.products import _build_price_update_message
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.events import EVENT_JOB_EXECUTED, EVENT_JOB_ERROR
from datetime import datetime
import asyncio


class APSchedulerService:
    def __init__(self, bot, product_service, notification_service, interval_minutes=1):
        """
        –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (APS).
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω.
        """
        self.scheduler = BackgroundScheduler()
        self.bot = bot
        self.product_service = product_service
        self.notification_service = notification_service
        self.interval_minutes = interval_minutes

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞—á
        self.scheduler.add_listener(self.listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        self.scheduler.add_job(self.run_price_update, 'interval', minutes=self.interval_minutes, id="update_prices")
        self.scheduler.start()
        logger.info(f"üîÅ APScheduler –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval_minutes} –º–∏–Ω).")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        self.scheduler.shutdown()
        logger.info("üõë APScheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    def listener(self, event):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á."""
        if event.exception:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {event.exception}")
        else:
            logger.info("‚úÖ ShedulerService –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É —É—Å–ø–µ—à–Ω–æ.")

    def run_price_update(self):
        """–§–æ–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω...")

        try:
            products = self.product_service.get_all_products_for_update()
            if not products:
                logger.info("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
                return

            loop = asyncio.get_event_loop()

            for product in products:
                result = asyncio.run_coroutine_threadsafe(
                    self.product_service.update_product_price(product["id"]),
                    loop
                ).result()

                # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if result["is_changed"]:
                    users = self.product_service.get_users_by_product(product["full_product"]["id"])
                    for user in users:
                        chat_id = getattr(user, "chat_id", None)
                        if chat_id:
                            asyncio.run_coroutine_threadsafe(
                                self.notification_service.notify_price_change(
                                    chat_id=chat_id,
                                    updated_product=result["full_product"],
                                    full_product=result["full_product"]
                                ),
                                loop
                            )

            logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")