from src.infrastructure.services import product_service, NotificationService
from src.infrastructure.services.logger import logger
from apscheduler.schedulers.asyncio import AsyncIOScheduler  # ‚Üê –í–ê–ñ–ù–û!
from apscheduler.events import EVENT_JOB_EXECUTED, EVENT_JOB_ERROR
import asyncio


class APSchedulerService:
    def __init__(self, bot, product_service, notification_service, interval_minutes=1):
        """
        –°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (APS).
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω.
        """
        self.scheduler = AsyncIOScheduler()
        self.bot = bot
        self.product_service = product_service
        self.notification_service = notification_service
        self.interval_minutes = interval_minutes
        self.loop = None  # –°–æ—Ö—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π loop

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞—á
        self.scheduler.add_listener(self.listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π event loop
        try:
            self.loop = asyncio.get_running_loop()
            logger.info(f"üìç Scheduler –∏—Å–ø–æ–ª—å–∑—É–µ—Ç event loop: {self.loop}")
        except RuntimeError:
            self.loop = asyncio.get_event_loop()
            logger.info(f"üìç Scheduler –∏—Å–ø–æ–ª—å–∑—É–µ—Ç event loop (fallback): {self.loop}")
        
        self.scheduler.add_job(
            self.run_price_update, 
            'interval', 
            minutes=self.interval_minutes, 
            id="update_prices"
        )
        self.scheduler.start()
        logger.info(f"üîÅ APScheduler –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval_minutes} –º–∏–Ω).")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
        self.scheduler.shutdown()
        logger.info("üõë APScheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    def listener(self, event):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á."""
        if event.exception:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {event.exception}")
        else:
            logger.info("‚úÖ ShedulerService –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É —É—Å–ø–µ—à–Ω–æ.")

    async def run_price_update(self):
        """–§–æ–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω...")

        try:
            users_products = self.product_service.get_all_products_for_update()

            if not users_products:
                logger.info("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
                return

            for user_product in users_products:
                try:
                    product_id = user_product['product_id']
                    user_id = user_product['user_id']
                    
                    logger.info(f'–ò–∑–≤–ª–µ—á–µ–Ω user:product -> {user_product}')
                    logger.info(f'–ü–æ–ª—É—á–µ–Ω —Ç–æ–≤–∞—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ID={product_id}')
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
                    result = self.product_service.update_product_price(product_id)
                    
                    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}: is_changed={result.get('is_changed')}")

                    if not result or 'full_product' not in result:
                        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
                        continue
                    
                    full_product = result["full_product"]
                    
                    # –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–≥–¥–∞
                    logger.info(f"üß™ –¢–ï–°–¢: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
                    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–∫—É—â–µ–º loop
                    asyncio.create_task(
                        self._send_notification(user_id, full_product)
                    )
                    
                    # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–¥–∞—á–∞ —É—Å–ø–µ–ª–∞ –Ω–∞—á–∞—Ç—å—Å—è
                    await asyncio.sleep(0.1)
                    
                    # –ü–†–û–î–ê–ö–®–ï–ù –ö–û–î:
                    # if result.get("is_changed", False):
                    #     logger.info(f"üîî –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
                    #     asyncio.create_task(
                    #         self._send_notification(user_id, full_product)
                    #     )
                    #     await asyncio.sleep(0.1)
                    
                    logger.info("üß™ –¢–ï–°–¢: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
                    break
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞: {e}", exc_info=True)
                    continue

            logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", exc_info=True)

    async def _send_notification(self, chat_id: str, full_product: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        try:
            logger.info(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å
            text = f"üîî –¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑–º–µ–Ω–∏–ª–∞—Å—å!\n\n" \
                   f"üì¶ {full_product['name']}\n\n" \
                   f"üí∞ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {full_product['latest_price']['previous_price_with_card']} ‚ÇΩ\n" \
                   f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {full_product['latest_price']['with_card']} ‚ÇΩ\n\n" \
                   f"üîó {full_product['link']}"
            
            logger.info(f"üìù –¢–µ–∫—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {text[:50]}...")
            
            # –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            message = await self.bot.send_message(
                chat_id=int(chat_id),
                text=text
            )
            
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ID {message.message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}", exc_info=True)
