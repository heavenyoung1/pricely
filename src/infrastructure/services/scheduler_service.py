from src.infrastructure.services import logger, product_service
from src.presentation.bot.utils.keyboard import build_product_actions_keyboard
from src.presentation.bot.handlers.products import _build_price_update_message
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.events import EVENT_JOB_EXECUTED, EVENT_JOB_ERROR
from datetime import datetime


class APSchedulerService:
    def __init__(self, bot, interval_minutes=10):
        '''
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è APScheduler –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á.

        :param parser: –ü–∞—Ä—Å–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        :param interval_minutes: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω—É—Ç)
        '''
        self.scheduler = BackgroundScheduler()
        self.bot = bot
        self.interval_minutes = interval_minutes

        self.scheduler.add_listener(self.listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)

    def start(self):
        self.scheduler.add_job(self.run_price_update, 'interval', minutes=self.interval_minutes, id="parse_product")
        self.scheduler.start()
        logger.info(f"APScheduler –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–µ {self.interval_minutes} –º–∏–Ω—É—Ç).")

    def stop(self):
        self.scheduler.shutdown()
        logger.info("APScheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def run_price_update(self):
        logger.info("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è...")

        try:
            products = product_service.get_all_products_for_update()
            if not products:
                logger.info("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
                return

            for product in products:
                try:
                    await product_service.update_product_price(product["id"])
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product['id']}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")