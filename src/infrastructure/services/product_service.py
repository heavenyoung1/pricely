import logging
from typing import Optional
from src.domain.exceptions import ProductNotFoundError, UserCreationError
from src.infrastructure.parsers import OzonParser
from src.application.use_cases import (
    CreateUserUseCase,
    CreateProductUseCase,
    GetProductUseCase,
    GetFullProductUseCase,
    UpdateProductPriceUseCase,
    DeleteProductUseCase,
    GetProductForUserUseCase,
    GetUserProductsUseCase,
)
from src.domain.entities import Product, Price, User
from src.core import SQLAlchemyUnitOfWork, with_uow

logger = logging.getLogger(__name__)

class ProductService:
    '''–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ UseCase —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UnitOfWork.'''

    def __init__(self, uow_factory, parser: Optional[OzonParser] = None):
        self.uow_factory = uow_factory
        self.parser = parser or OzonParser()  # –¥–µ—Ñ–æ–ª—Ç = OzonParser

    @with_uow(commit=True)
    def create_user(self, user: User) -> None:
        '''–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'''
        try:
            use_case = CreateUserUseCase(user_repo=self.uow.user_repository)
            use_case.execute(user)
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {str(e)}')
            raise UserCreationError(f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}')

    @with_uow(commit=True)
    def create_product(self, user_id: str, url: str) -> dict:
        '''–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –ø–æ URL.'''
        use_case = CreateProductUseCase(
            user_repo=self.uow.user_repository,
            product_repo=self.uow.product_repository,
            price_repo=self.uow.price_repository,
            user_products_repo=self.uow.user_products_repository,
            parser=self.parser,
        )
        return use_case.execute(user_id, url)

    @with_uow(commit=False)
    def get_product(self, product_id: str) -> Product:
        '''–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID.'''
        try:
            use_case = GetProductUseCase(product_repo=self.uow.product_repository)
            return use_case.execute(product_id)
        except ProductNotFoundError as e:
            logger.warning(f'–ü—Ä–æ–¥—É–∫—Ç {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω: {str(e)}')
            raise
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {str(e)}')
            raise

    @with_uow(commit=False)
    def get_full_product(self, product_id: str):
        '''–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.'''
        try:
            use_case = GetFullProductUseCase(
                product_repo=self.uow.product_repository,
                price_repo=self.uow.price_repository,
                user_repo=self.uow.user_repository,
            )
            return use_case.execute(product_id)
        except ProductNotFoundError as e:
            logger.warning(f'–ü—Ä–æ–¥—É–∫—Ç {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω: {str(e)}')
            raise
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ {product_id}: {str(e)}')
            raise

    @with_uow(commit=False)
    def get_all_products(self, user_id: str) -> list:
        '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'''
        use_case_get_products = GetProductForUserUseCase(
            product_repo=self.uow.product_repository,
            price_repo=self.uow.price_repository,
            user_products_repo=self.uow.user_products_repository
        )
        product_refs = use_case_get_products.execute(user_id=user_id)
        if not product_refs:
            return []

        if isinstance(product_refs, list) and product_refs and isinstance(product_refs[0], dict):
            return product_refs

        use_case_for_products = GetFullProductUseCase(
            product_repo=self.uow.product_repository,
            price_repo=self.uow.price_repository,
            user_repo=self.uow.user_repository,
        )

        products = []
        for pid in product_refs:
            try:
                pid_str = str(pid)
                product_full = use_case_for_products.execute(pid_str)
                products.append(product_full)
            except ProductNotFoundError:
                logger.warning(f'Product {pid} is referenced for user {user_id} but not found in products table')
            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è {pid}: {e}')
                
        return products

    @with_uow(commit=True)
    def update_product_price(self, product_id: str) -> dict:
        '''–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞.'''
        use_case_update_product = UpdateProductPriceUseCase(
            product_repo=self.uow.product_repository,
            price_repo=self.uow.price_repository,
            parser=OzonParser(),
        )

        result_use_case_update_product = use_case_update_product.execute(
            product_id=product_id,
        )

        is_changed = result_use_case_update_product['is_changed']
        updated_product = result_use_case_update_product['product_data']

        # ======================================================
        # üß™ –î–õ–Ø –ü–†–û–î–ê–ö–®–ù–ê –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨ –°–¢–†–û–ö–£
        # –ï—Å–ª–∏ is_chaned == True —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—Å–µ–≥–¥–∞
        # is_changed = True
        # ======================================================

        return {'updated_product': updated_product, 'is_changed': is_changed}

    @with_uow(commit=False)
    def get_all_products_for_update(self):
        '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å.'''
        use_case = GetUserProductsUseCase(
            user_products_repo=self.uow.user_products_repository
        )
        return use_case.execute()

    @with_uow(commit=True)
    def delete_product(self, product_id) -> None:
        '''–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç.'''
        try:
            use_case = DeleteProductUseCase(
                user_repo=self.uow.user_repository,
                product_repo=self.uow.product_repository,
                price_repo=self.uow.price_repository,
            )
            use_case.execute(product_id)
        except ProductNotFoundError as e:
            logger.warning(f'–ü—Ä–æ–¥—É–∫—Ç {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω: {str(e)}')
            raise
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {str(e)}')
            raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
product_service = ProductService(uow_factory=SQLAlchemyUnitOfWork)