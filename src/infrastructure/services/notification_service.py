import logging
import asyncio
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

logger = logging.getLogger(__name__)

class NotificationService:
    '''
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.
    '''
    
    def __init__(self, bot):
        '''
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ aiogram
        '''
        self.bot = bot


    async def notify_multiple_products(self, chat_id: str, updated_products: list):
        '''
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ç–æ–≤–∞—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            updated_products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        '''
        try:
            logger.info(f'üì® NotificationService: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}')

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö
            products_count = len(updated_products)
            product_word = get_product_word_form(products_count)  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞

            text = f'üîî {"–¶–µ–Ω–∞ –Ω–∞ " + product_word if products_count == 1 else f"–¶–µ–Ω—ã –Ω–∞ {products_count} {product_word} –∏–∑–º–µ–Ω–∏–ª–∏—Å—å"}!\n\n'
            footer = f'\n{"‚Äî" * 25}\n\n'  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            inline_buttons = []  # –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

            for i, product in enumerate(updated_products):
                new_price_with_card = product['with_card']
                new_price_without_card = product['without_card']
                prev_price_with_card = product['previous_price_with_card']
                prev_price_without_card = product['previous_price_without_card']
                price_diff = new_price_with_card - prev_price_with_card
                price_emoji = 'üìâ' if price_diff < 0 else 'üìà'

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                text += (
                    f'{price_emoji} üì¶ [*{product["name"][:50]}*]({product["link"]})\n\n'
                    f'üí≥ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: **{new_price_with_card} ‚ÇΩ**\n'
                    f'üí≥ –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞: **{prev_price_with_card} ‚ÇΩ**\n'
                    f'{"üíö" if price_diff < 0 else "üî¥"} **–†–∞–∑–Ω–∏—Ü–∞**: {price_diff:+d} ‚ÇΩ\n\n'
                )

                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                if i != len(updated_products) - 1:
                    text += footer

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                button = InlineKeyboardButton(text=f'{product["name"][:50]}', url=product['link'])
                inline_buttons.append([button])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ø–∏—Å–æ–∫ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons)

            logger.info(f'üìù –¢–µ–∫—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {text[:50]}...')

            # –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            message = await self.bot.send_message(
                chat_id=int(chat_id),
                text=text,
                parse_mode='Markdown',  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –±—É–¥–µ—Ç Markdown
                disable_web_page_preview=True,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
                reply_markup=keyboard,  # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            
            logger.info(f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ID {message.message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}')
        
        except Exception as e:
            logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}', exc_info=True)


    async def notify_multiple_users(self, users_chat_ids: list, updated_product: dict):
        '''
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        
        Args:
            users_chat_ids: –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            updated_product: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
        '''
        for chat_id in users_chat_ids:
            await self.notify_price_change(chat_id, updated_product)
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ rate limit
            await asyncio.sleep(0.3)

def get_product_word_form(count):
    if count == 1:
        return '—Ç–æ–≤–∞—Ä'
    elif 2 <= count <= 4:
        return '—Ç–æ–≤–∞—Ä–∞'
    else:
        return '—Ç–æ–≤–∞—Ä–æ–≤'
